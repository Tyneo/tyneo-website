<?php
/**
 * BaseTool
 * Generated by Tyneo Base Tools
 *
 * @package     model
 * @author      Samuel Kauffmann <skauffmann@tyneo.net>
 * @copyright   Copyright (c) 2011, Samuel Kauffmann
 * @link        http://www.tyneo.net
 * @filesource	BaseTool.class.php
 */
namespace model\base;

/**
 * This class provides an object representation of a Tool.
 *
 * @author		Samuel Kauffmann <skauffmann@tyneo.net>
 * @version		1.0
 */
abstract class BaseTool extends AbstractBaseObject {


	/**
	 * Get the id
	 *
	 * @return id the id value
	 */
	public function getId() {
		return $this->properties->get('id');
	}

	/**
	 * Set the id
	 *
	 * @param id the id value
	 *
	 * @return BaseTool
	 */
	public function setId($id) {
		$this->properties->set('id', $id);
		return $this;
	}


	/**
	 * Get the name
	 *
	 * @return name the name value
	 */
	public function getName() {
		return $this->properties->get('name');
	}

	/**
	 * Set the name
	 *
	 * @param name the name value
	 *
	 * @return BaseTool
	 */
	public function setName($name) {
		$this->properties->set('name', $name);
		return $this;
	}


	/**
	 * Get the slug
	 *
	 * @return slug the slug value
	 */
	public function getSlug() {
		return $this->properties->get('slug');
	}

	/**
	 * Set the slug
	 *
	 * @param slug the slug value
	 *
	 * @return BaseTool
	 */
	public function setSlug($slug) {
		$this->properties->set('slug', $slug);
		return $this;
	}


	/**
	 * Get the img
	 *
	 * @return img the img value
	 */
	public function getImg() {
		return $this->properties->get('img');
	}

	/**
	 * Set the img
	 *
	 * @param img the img value
	 *
	 * @return BaseTool
	 */
	public function setImg($img) {
		$this->properties->set('img', $img);
		return $this;
	}


	/**
	 * Get the version
	 *
	 * @return version the version value
	 */
	public function getVersion() {
		return $this->properties->get('version');
	}

	/**
	 * Set the version
	 *
	 * @param version the version value
	 *
	 * @return BaseTool
	 */
	public function setVersion($version) {
		$this->properties->set('version', $version);
		return $this;
	}


	/**
	 * Get the description
	 *
	 * @return description the description value
	 */
	public function getDescription() {
		return $this->properties->get('description');
	}

	/**
	 * Set the description
	 *
	 * @param description the description value
	 *
	 * @return BaseTool
	 */
	public function setDescription($description) {
		$this->properties->set('description', $description);
		return $this;
	}


	/**
	 * Get the environment
	 *
	 * @return environment the environment value
	 */
	public function getEnvironment() {
		return $this->properties->get('environment');
	}

	/**
	 * Set the environment
	 *
	 * @param environment the environment value
	 *
	 * @return BaseTool
	 */
	public function setEnvironment($environment) {
		$this->properties->set('environment', $environment);
		return $this;
	}


	/**
	 * Get the license
	 *
	 * @return license the license value
	 */
	public function getLicense() {
		return $this->properties->get('license');
	}

	/**
	 * Set the license
	 *
	 * @param license the license value
	 *
	 * @return BaseTool
	 */
	public function setLicense($license) {
		$this->properties->set('license', $license);
		return $this;
	}


	/**
	 * Get the tool_type_id
	 *
	 * @return tool_type_id the tool_type_id value
	 */
	public function getToolTypeId() {
		return $this->properties->get('tool_type_id');
	}

	/**
	 * Set the tool_type_id
	 *
	 * @param tool_type_id the tool_type_id value
	 *
	 * @return BaseTool
	 */
	public function setToolTypeId($tool_type_id) {
		$this->properties->set('tool_type_id', $tool_type_id);
		return $this;
	}


	/**
	 * Get the editor_id
	 *
	 * @return editor_id the editor_id value
	 */
	public function getEditorId() {
		return $this->properties->get('editor_id');
	}

	/**
	 * Set the editor_id
	 *
	 * @param editor_id the editor_id value
	 *
	 * @return BaseTool
	 */
	public function setEditorId($editor_id) {
		$this->properties->set('editor_id', $editor_id);
		return $this;
	}


	public function __toString() {
				return $this->getName();
    }



	public function getToolType() {
		$tooltypeManager = new \model\ToolTypeManager();
		return $tooltypeManager->getToolType($this->getToolTypeId());
	}

	public function getEditor() {
		$editorManager = new \model\EditorManager();
		return $editorManager->getEditor($this->getEditorId());
	}

}
