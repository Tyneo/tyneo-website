<?php
/**
 * BaseEventManager
 * Generated by Tyneo Base Tools
 *
 * @package     model
 * @author      Samuel Kauffmann <skauffmann@tyneo.net>
 * @copyright   Copyright (c) 2011, Samuel Kauffmann
 * @link        http://www.tyneo.net
 * @filesource	BaseEventManager.class.php
 */
namespace model\base;

abstract class BaseEventManager extends AbstractBaseObjectManager {
	public function __construct(\framework\ApplicationContext $context) {
		parent::__construct($context);
		$this->setTableName('event');
	}

	public function getEvents() {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		$results = $this->database->query($query->toSQL());
		return $this->getObjectsFromResult($results);
	}


	/**
	 * Returns a limited and filter number of Events	 *
	 * @param $start Number Index where we start to display Events (by default 0)
	 * @param $maxperpage Number Maximum number of item per page
	 * @param $filter String null or a Event filter
	 */
	public function getLimitedEvents($start, $maxperpage, $filter) {
		if($maxperpage == null) $maxperpage = $this->context->getConfiguration()->get('max_per_page', 25);
		if($start == null) $start = 0;

		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());

		if($filter != null) {
			$f = new \model\EventFilter($filter);
			$f->apply($query);
		}

		$query->setStart($start)->setMaxPerPage($maxperpage);

		$results = $this->database->query($query->toSQL());
		return $this->getObjectsFromResult($results);
	}

	public function countLimitedEvents($filter) {
		$query = new \framework\query\QueryBuilder();
		$query->addSelectCount($this->getTableName().'.id', 'total', true);
		$query->addTable($this->getTableName());

		if($filter != null) {
			$f = new \model\EventFilter($filter);
			$f->apply($query);
		}

		return $this->database->queryUniqueObject($query->toSQL())->total;
	}

	public function countEvents() {
		$query = new \framework\query\QueryBuilder();
		$query->addSelectCount($this->getTableName().'.id', 'total', true);
		$query->addTable($this->getTableName());
		return $this->database->queryUniqueObject($query->toSQL())->total;
	}

	public function getEvent($id) {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		if(!is_array($id)) {
			$query->addWhere($this->getTableName().'.id', \framework\query\operator\Operator::EQUAL, $id);
		} else {
			foreach ($id as $key => $value) {
				$query->addWhere($key, \framework\query\operator\Operator::EQUAL, $value);
			}
		}
		$object = $this->database->queryUniqueObject($query->toSQL());
		if($object != null) {
			return $this->getObjectFromRow($object);
		}
		return null;
	}

	protected function getUpdateQuery(\model\Event $obj) {
		$query = new \framework\query\UpdateBuilder($this->getTableName());
					$query->setField('id', $obj->getId());
							$query->setField('name', $obj->getName());
							$query->setField('date', $obj->getDate());
							$query->setField('location', $obj->getLocation());
							$query->setField('description', $obj->getDescription());
							$query->setField('picture', $obj->getPicture());
							$query->setField('state', $obj->getState());
							$query->setField('created_date', $obj->getCreatedDate());
							$query->setField('updated_date', 'CURDATE()', true);

		foreach ($this->getIdFields() as $id) {
			$method = 'get'.$this->slugify($id);
			$query->addWhere($id, \framework\query\operator\Operator::EQUAL, $obj->$method());
		}
		return $query;
	}

	protected function update(\model\Event $obj) {
		$query = $this->getUpdateQuery($obj);
		return $this->database->execute($query->toSQL());
	}

	protected function getCreateQuery(\model\Event $obj) {
		$query = new \framework\query\CreateBuilder($this->getTableName());
				$query->setField('id', $obj->getId());
					$query->setField('name', $obj->getName());
					$query->setField('date', $obj->getDate());
					$query->setField('location', $obj->getLocation());
					$query->setField('description', $obj->getDescription());
					$query->setField('picture', $obj->getPicture());
					$query->setField('state', $obj->getState());
					$query->setField('created_date', 'CURDATE()', true);
					$query->setField('updated_date', 'CURDATE()', true);

		return $query;
	}

	protected function create(\model\Event $obj) {
		$query = $this->getCreateQuery($obj);

		if($this->database->execute($query->toSQL())) {
			$obj->setNew(false);
			return true;
		}
		return false;
	}

	public function delete(\model\Event $obj) {
		$query = new \framework\query\DeleteBuilder($this->getTableName());
		foreach ($this->getIdFields() as $id) {
			$method = 'get'.$this->slugify($id);
			$query->addWhere($id, \framework\query\operator\Operator::EQUAL, $obj->$method());
		}
		if($this->database->execute($query->toSQL())) {
			return true;
		}
		return false;
	}

	protected function getObjectFromRow($row) {
		$object = new \model\Event();
			$object->setId(\framework\utility\String::fromSQL($row->id));
			$object->setName(\framework\utility\String::fromSQL($row->name));
			$object->setDate(\framework\utility\String::fromSQL($row->date));
			$object->setLocation(\framework\utility\String::fromSQL($row->location));
			$object->setDescription(\framework\utility\String::fromSQL($row->description));
			$object->setPicture(\framework\utility\String::fromSQL($row->picture));
			$object->setState(\framework\utility\String::fromSQL($row->state));
			$object->setCreatedDate(\framework\utility\String::fromSQL($row->created_date));
			$object->setUpdatedDate(\framework\utility\String::fromSQL($row->updated_date));

		$object->setNew(false);
		return $object;
	}

}
