<?php
/**
 * BaseUsersManager
 * Generated by Tyneo Base Tools
 *
 * @package     model
 * @author      Samuel Kauffmann <skauffmann@tyneo.net>
 * @copyright   Copyright (c) 2011, Samuel Kauffmann
 * @link        http://www.tyneo.net
 * @filesource	BaseUsersManager.class.php
 */
namespace model\base;

abstract class BaseUsersManager extends AbstractBaseObjectManager {
	public function __construct(\framework\ApplicationContext $context) {
		parent::__construct($context);
		$this->setTableName('users');
	}

	public function getUserss() {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		$results = $this->database->query($query->toSQL());
		return $this->getObjectsFromResult($results);
	}

	public function getUsers($id) {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		if(!is_array($id)) {
			$query->addWhere($this->getTableName().'.id', \framework\query\operator\Operator::EQUAL, $id);
		} else {
			foreach ($id as $key => $value) {
				$query->addWhere($key, \framework\query\operator\Operator::EQUAL, $value);
			}
		}
		$object = $this->database->queryUniqueObject($query->toSQL());
		if($object != null) {
			return $this->getObjectFromRow($object);
		}
		return null;
	}

	protected function getUpdateQuery(\model\Users $obj) {
		$query = new \framework\query\UpdateBuilder($this->getTableName());
					$query->setField('id', $obj->getId());
							$query->setField('user_login', $obj->getUserLogin());
							$query->setField('user_pass', $obj->getUserPass());
							$query->setField('user_nicename', $obj->getUserNicename());
							$query->setField('user_email', $obj->getUserEmail());
							$query->setField('user_url', $obj->getUserUrl());
							$query->setField('user_registered', $obj->getUserRegistered());
							$query->setField('user_activation_key', $obj->getUserActivationKey());
							$query->setField('user_status', $obj->getUserStatus());
							$query->setField('display_name', $obj->getDisplayName());

		foreach ($this->getIdFields() as $id) {
			$method = 'get'.$this->slugify($id);
			$query->addWhere($id, \framework\query\operator\Operator::EQUAL, $obj->$method());
		}
		return $query;
	}

	protected function update(\model\Users $obj) {
		$query = $this->getUpdateQuery($obj);
		$this->database->execute($query->toSQL());
	}

	protected function getCreateQuery(\model\Users $obj) {
		$query = new \framework\query\CreateBuilder($this->getTableName());
				$query->setField('id', $obj->getId());
					$query->setField('user_login', $obj->getUserLogin());
					$query->setField('user_pass', $obj->getUserPass());
					$query->setField('user_nicename', $obj->getUserNicename());
					$query->setField('user_email', $obj->getUserEmail());
					$query->setField('user_url', $obj->getUserUrl());
					$query->setField('user_registered', $obj->getUserRegistered());
					$query->setField('user_activation_key', $obj->getUserActivationKey());
					$query->setField('user_status', $obj->getUserStatus());
					$query->setField('display_name', $obj->getDisplayName());

		return $query;
	}

	protected function create(\model\Users $obj) {
		$query = $this->getCreateQuery($obj);
		$this->database->execute($query->toSQL());
		$obj->setNew(false);
	}

	protected function getObjectFromRow($row) {
		$object = new \model\Users();
			$object->setId(\framework\utility\String::fromSQL($row->id));
			$object->setUserLogin(\framework\utility\String::fromSQL($row->user_login));
			$object->setUserPass(\framework\utility\String::fromSQL($row->user_pass));
			$object->setUserNicename(\framework\utility\String::fromSQL($row->user_nicename));
			$object->setUserEmail(\framework\utility\String::fromSQL($row->user_email));
			$object->setUserUrl(\framework\utility\String::fromSQL($row->user_url));
			$object->setUserRegistered(\framework\utility\String::fromSQL($row->user_registered));
			$object->setUserActivationKey(\framework\utility\String::fromSQL($row->user_activation_key));
			$object->setUserStatus(\framework\utility\String::fromSQL($row->user_status));
			$object->setDisplayName(\framework\utility\String::fromSQL($row->display_name));

		$object->setNew(false);
		return $object;
	}

}
