<?php
/**
 * Tool
 * Generated by Tyneo Base Tools
 *
 * @package     model
 * @author      Samuel Kauffmann <skauffmann@tyneo.net>
 * @copyright   Copyright (c) 2011, Samuel Kauffmann
 * @link        http://www.tyneo.net
 * @filesource	BaseToolManager.class.php
 */
namespace model;

/**
 * This class provides manager to manipulate Tool objects.
 *
 * @author		Samuel Kauffmann <skauffmann@tyneo.net>
 * @version		1.0
 */
class ToolManager extends base\BaseToolManager {
	public function __construct() {
		parent::__construct(\framework\ApplicationContext::getInstance());
	}

	public function getToolAndEditor($tool_type, $slug) {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		$query->addWhere($this->getTableName().'.slug', \framework\query\operator\Operator::EQUAL, $slug);
		
		$query->addSelect('tool_type.name', 'tool_type_name');
		$query->addJoin('tool_type', 'id', $this->getTableName().'.tool_type_id');
		$query->addWhere('tool_type.name', \framework\query\operator\Operator::EQUAL, $tool_type);
		
		$query->addSelect('editor.name', 'editor_name');
		$query->addSelect('editor.site', 'editor_site');
		$query->addSelect('editor.description', 'editor_description');
		$query->addJoin('editor', 'id', $this->getTableName().'.editor_id');
		
		$object = $this->database->queryUniqueObject($query->toSQL());
		if($object != null) return $this->getObjectFromRow($object);
		return null;
	}
	
	public function getToolsAndEditors($tool_type) {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		
		$query->addSelect('tool_type.name', 'tool_type_name');
		$query->addJoin('tool_type', 'id', $this->getTableName().'.tool_type_id');
		$query->addWhere('tool_type.name', \framework\query\operator\Operator::EQUAL, $tool_type);
		
		$query->addSelect('editor.name', 'editor_name');
		$query->addSelect('editor.site', 'editor_site');
		$query->addJoin('editor', 'id', $this->getTableName().'.editor_id');
		
		$results = $this->database->query($query->toSQL());
		return $this->getObjectsFromResult($results);
	}

	public function getTools() {
		$query = new \framework\query\QueryBuilder();
		$query->addSelect($this->getTableName().'.*');
		$query->addTable($this->getTableName());
		
		$query->addSelect('tool_type.name', 'tool_type_name');
		$query->addJoin('tool_type', 'id', $this->getTableName().'.tool_type_id');
		
		$query->addSelect('editor.name', 'editor_name');
		$query->addSelect('editor.site', 'editor_site');
		$query->addJoin('editor', 'id', $this->getTableName().'.editor_id');
		
		$results = $this->database->query($query->toSQL());
		return $this->getObjectsFromResult($results);
	}

	
	protected function getObjectFromRow($row) {
		$object = parent::getObjectFromRow($row);

		
		$object->setEditorName(\framework\utility\String::fromSQL($row->editor_name));
		$object->setEditorSite(\framework\utility\String::fromSQL($row->editor_site));
		$object->setEditorDescription(\framework\utility\String::fromSQL($row->editor_description));
		$object->setToolTypeName(\framework\utility\String::fromSQL($row->tool_type_name));
	
		return $object;
	}
}
